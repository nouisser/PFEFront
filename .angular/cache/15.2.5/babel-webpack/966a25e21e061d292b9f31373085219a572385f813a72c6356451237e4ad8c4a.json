{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  accepterUser(idUser) {\n    const url = `${this.apiUrl}/accepterUser/${idUser}`;\n    this.http.post(url, {}).subscribe(() => {\n      console.log('Utilisateur accepté avec succès');\n    }, error => {\n      console.error('Une erreur s\\'est produite lors de l\\'acceptation de l\\'utilisateur', error);\n    });\n  }\n  deleteUsers(id) {\n    return this.httpClient.delete('http://localhost:8089/SpringMVC/api/auth/deleteUser/' + id);\n  }\n  getAllUser() {\n    return this.httpClient.get('http://localhost:8089/SpringMVC/api/auth/User/');\n  }\n  addUsers(user, headers) {\n    const options = {\n      headers: headers\n    };\n    return this.httpClient.post('http://localhost:8089/SpringMVC/api/auth/addUser/', user, options);\n  }\n  updateUser(id, User) {\n    return this.httpClient.put('http://localhost:8089/SpringMVC/api/auth/modify-User/' + id, User);\n  }\n  getUserbyid(id) {\n    return this.httpClient.get('http://localhost:8089/SpringMVC/api/auth/getUserby/' + id);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAI9B;EAGAC,YAAY,CAACC,MAAc;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,iBAAiBF,MAAM,EAAE;IACnD,IAAI,CAACG,IAAI,CAACC,IAAI,CAAOH,GAAG,EAAE,EAAE,CAAC,CAACI,SAAS,CACrC,MAAK;MACHC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD,CAAC,EACAC,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,qEAAqE,EAAEA,KAAK,CAAC;IAC7F,CAAC,CACF;EACH;EAGAC,WAAW,CAACC,EAAQ;IAClB,OAAO,IAAI,CAACZ,UAAU,CAACa,MAAM,CAAC,sDAAsD,GAACD,EAAE,CAAC;EAC1F;EAGAE,UAAU;IACR,OAAO,IAAI,CAACd,UAAU,CAACe,GAAG,CAAC,gDAAgD,CAAC;EAC9E;EACAC,QAAQ,CAACC,IAAS,EAAEC,OAAoB;IACtC,MAAMC,OAAO,GAAG;MAAED,OAAO,EAAEA;IAAO,CAAE;IACpC,OAAO,IAAI,CAAClB,UAAU,CAACM,IAAI,CAAM,mDAAmD,EAAEW,IAAI,EAAEE,OAAO,CAAC;EACtG;EAEAC,UAAU,CAACR,EAAM,EAAES,IAAU;IAC3B,OAAO,IAAI,CAACrB,UAAU,CAACsB,GAAG,CAAQ,uDAAuD,GAACV,EAAE,EAAES,IAAI,CAAC;EAInG;EAGAE,WAAW,CAACX,EAAM;IAChB,OAAO,IAAI,CAACZ,UAAU,CAACe,GAAG,CAAQ,qDAAqD,GAACH,EAAE,CAAC;EAC7F;;;mBA7CSd,YAAY;AAAA;;SAAZA,YAAY;EAAA0B,SAAZ1B,YAAY;EAAA2B,YAFX;AAAM","names":["UsersService","constructor","httpClient","accepterUser","idUser","url","apiUrl","http","post","subscribe","console","log","error","deleteUsers","id","delete","getAllUser","get","addUsers","user","headers","options","updateUser","User","put","getUserbyid","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\admin\\admin-features\\users.service.ts"],"sourcesContent":["import { HttpClient , HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Users } from './Users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  constructor(private httpClient: HttpClient) { \n\n\n    \n  }\n\n\n  accepterUser(idUser: number): void {\n    const url = `${this.apiUrl}/accepterUser/${idUser}`;\n    this.http.post<void>(url, {}).subscribe(\n      () => {\n        console.log('Utilisateur accepté avec succès');\n      },\n      (error) => {\n        console.error('Une erreur s\\'est produite lors de l\\'acceptation de l\\'utilisateur', error);\n      }\n    );\n  }\n\n\n  deleteUsers(id:any[]){\n    return this.httpClient.delete('http://localhost:8089/SpringMVC/api/auth/deleteUser/'+id)\n  }\n\n\n  getAllUser(){\n    return this.httpClient.get('http://localhost:8089/SpringMVC/api/auth/User/')\n  }\n  addUsers(user: any, headers: HttpHeaders): Observable<any> {\n    const options = { headers: headers };\n    return this.httpClient.post<any>('http://localhost:8089/SpringMVC/api/auth/addUser/', user, options);\n  }\n\n  updateUser(id:any, User:Users):Observable<Object>{\n    return this.httpClient.put<Users>('http://localhost:8089/SpringMVC/api/auth/modify-User/'+id, User)\n    \n    \n    \n    }\n\n    \n    getUserbyid(id:any ):Observable<Users>{\n      return this.httpClient.get<Users>('http://localhost:8089/SpringMVC/api/auth/getUserby/'+id)\n    }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}