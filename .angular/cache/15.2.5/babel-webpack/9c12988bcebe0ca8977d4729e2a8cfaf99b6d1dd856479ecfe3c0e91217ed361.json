{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../transaction-service.service\";\nimport * as i2 from \"ng2-charts\";\nexport class SalesByMonthComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.barChartOptions = {\n      responsive: true\n    };\n    this.barChartLabels = [];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.colors = [{\n      backgroundColor: \"red\"\n    }, {\n      backgroundColor: \"green\"\n    }, {\n      backgroundColor: \"blue\"\n    }, {\n      backgroundColor: \"yellow\"\n    }];\n    this.barChartData = [{\n      data: [114400, 171599],\n      label: 'Base',\n      stack: 'a'\n    }, {\n      data: [100350, 185649],\n      label: 'Variable',\n      stack: 'a'\n    }, {\n      data: [34320],\n      label: 'KSO',\n      stack: 'a'\n    }, {\n      data: [74955, 91899],\n      label: 'Upside 130%',\n      stack: 'a'\n    }];\n    this.typeData = [];\n  }\n  ngOnInit() {\n    this.getTransactions();\n  }\n  getTransactions() {\n    this.barChartLabels = [];\n    this.barChartData = [];\n    this.taskService.getTransactions().subscribe(d => {\n      console.log(d);\n      d.forEach(typeCount => {\n        console.log(typeCount.datetransaction);\n        console.log(typeCount.idTransaction);\n        this.barChartData.push({\n          data: [typeCount.idTransaction],\n          label: typeCount.result.toString()\n        });\n        // this.lineChartData.push(typeCount.surname);\n        this.barChartLabels.push(typeCount.datetransaction.toLocaleDateString());\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n}\nSalesByMonthComponent.ɵfac = function SalesByMonthComponent_Factory(t) {\n  return new (t || SalesByMonthComponent)(i0.ɵɵdirectiveInject(i1.TransactionServiceService));\n};\nSalesByMonthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SalesByMonthComponent,\n  selectors: [[\"app-sales-by-month\"]],\n  decls: 2,\n  vars: 7,\n  consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"plugins\", \"legend\", \"chartType\", \"colors\"]],\n  template: function SalesByMonthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"plugins\", ctx.barChartPlugins)(\"legend\", ctx.barChartLegend)(\"chartType\", ctx.barChartType)(\"colors\", ctx.colors);\n    }\n  },\n  dependencies: [i2.BaseChartDirective],\n  styles: [\"@charset \\\"UTF-8\\\";\\n.chart-wrapper[_ngcontent-%COMP%] {\\n  width: 600px; \\n  height: 400px; \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hZG1pbi9hZG1pbi1mZWF0dXJlcy9zYWxlcy1ieS1tb250aC9zYWxlcy1ieS1tb250aC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0I7QUFBaEI7RUFDRSxZQUFBLEVBQUEsb0NBQUE7RUFDQSxhQUFBLEVBQUEsb0NBQUE7QUFFRiIsInNvdXJjZXNDb250ZW50IjpbIi5jaGFydC13cmFwcGVyIHtcclxuICB3aWR0aDogNjAwcHg7IC8qIETDg8KpZmluaXNzZXogbGEgbGFyZ2V1ciBzb3VoYWl0w4PCqWUgKi9cclxuICBoZWlnaHQ6IDQwMHB4OyAvKiBEw4PCqWZpbmlzc2V6IGxhIGhhdXRldXIgc291aGFpdMODwqllICovXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,qBAAqB;EAuBhCC,YAAoBC,WAAsC;IAAtC,gBAAW,GAAXA,WAAW;IAtBxB,oBAAe,GAAiB;MACrCC,UAAU,EAAE;KACb;IACM,mBAAc,GAAY,EAAE;IAC5B,iBAAY,GAAc,KAAK;IAC/B,mBAAc,GAAG,IAAI;IACrB,oBAAe,GAAG,EAAE;IACpB,WAAM,GAAG,CACd;MAAEC,eAAe,EAAC;IAAK,CAAE,EACzB;MAAEA,eAAe,EAAC;IAAO,CAAE,EAC3B;MAAEA,eAAe,EAAC;IAAM,CAAE,EAC1B;MAAEA,eAAe,EAAC;IAAQ,CAAE,CAC3B;IAEM,iBAAY,GAAoB,CACrC;MAAEC,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAG,CAAE,EACrD;MAAEF,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MAAEC,KAAK,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAG,CAAE,EACzD;MAAEF,IAAI,EAAE,CAAC,KAAK,CAAC;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAG,CAAE,EAC3C;MAAEF,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;MAAEC,KAAK,EAAE,aAAa;MAAEC,KAAK,EAAE;IAAG,CAAE,CAC3D;IACI,aAAQ,GAAwB,EAAE;EAEqB;EAE9DC,QAAQ;IACN,IAAI,CAACC,eAAe,EAAE;EACxB;EAIAA,eAAe;IAEX,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACT,WAAW,CAACO,eAAe,EAAE,CAACG,SAAS,CACzCC,CAAC,IAAI;MACJC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MACdA,CAAC,CAACG,OAAO,CAAEC,SAAsB,IAAI;QACnCH,OAAO,CAACC,GAAG,CAACE,SAAS,CAACC,eAAe,CAAC;QACtCJ,OAAO,CAACC,GAAG,CAACE,SAAS,CAACE,aAAa,CAAC;QACpC,IAAI,CAACR,YAAY,CAACS,IAAI,CAAC;UAAEf,IAAI,EAAE,CAACY,SAAS,CAACE,aAAa,CAAC;UAAEb,KAAK,EAAEW,SAAS,CAACI,MAAM,CAACC,QAAQ;QAAE,CAAE,CAAC;QAEhG;QACA,IAAI,CAACZ,cAAc,CAACU,IAAI,CAACH,SAAS,CAACC,eAAe,CAACK,kBAAkB,EAAE,CAAC;MACzE,CAAC,CAAC;IACJ,CAAC,EACAC,KAAK,IAAI;MACRV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;;;mBAnDSxB,qBAAqB;AAAA;;QAArBA,qBAAqB;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZlCC,8BAA6B;MACzBA,4BAQS;MACXA,iBAAM;;;MARFA,eAAyB;MAAzBA,2CAAyB","names":["SalesByMonthComponent","constructor","taskService","responsive","backgroundColor","data","label","stack","ngOnInit","getTransactions","barChartLabels","barChartData","subscribe","d","console","log","forEach","typeCount","datetransaction","idTransaction","push","result","toString","toLocaleDateString","error","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\admin\\admin-features\\sales-by-month\\sales-by-month.component.ts","C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\admin\\admin-features\\sales-by-month\\sales-by-month.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\r\nimport { Color, Label } from 'ng2-charts';\r\nimport { Transactions } from '../Transactions';\r\nimport { TransactionServiceService } from '../transaction-service.service';\r\n\r\n@Component({\r\n  selector: 'app-sales-by-month',\r\n  templateUrl: './sales-by-month.component.html',\r\n  styleUrls: ['./sales-by-month.component.scss']\r\n})\r\n\r\nexport class SalesByMonthComponent implements OnInit {\r\n  public barChartOptions: ChartOptions = {\r\n    responsive: true,\r\n  };\r\n  public barChartLabels: Label[] = [];\r\n  public barChartType: ChartType = 'bar';\r\n  public barChartLegend = true;\r\n  public barChartPlugins = [];\r\n  public colors = [\r\n    { backgroundColor:\"red\" },\r\n    { backgroundColor:\"green\" },\r\n    { backgroundColor:\"blue\" },\r\n    { backgroundColor:\"yellow\" }\r\n    ];\r\n\r\n    public barChartData: ChartDataSets[] = [\r\n      { data: [114400, 171599], label: 'Base', stack: 'a' },\r\n      { data: [100350, 185649], label: 'Variable', stack: 'a' },\r\n      { data: [34320], label: 'KSO', stack: 'a' },\r\n      { data: [74955, 91899], label: 'Upside 130%', stack: 'a' }\r\n    ];\r\n  public typeData: Array<Transactions> = [];\r\n\r\n  constructor(private taskService: TransactionServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTransactions();\r\n  }\r\n\r\n\r\n  \r\n  getTransactions() {\r\n    \r\n      this.barChartLabels = [];\r\n      this.barChartData = [];\r\n      this.taskService.getTransactions().subscribe(\r\n        (d) => {\r\n          console.log(d);\r\n          d.forEach((typeCount:Transactions) => {\r\n            console.log(typeCount.datetransaction);\r\n            console.log(typeCount.idTransaction);\r\n            this.barChartData.push({ data: [typeCount.idTransaction], label: typeCount.result.toString() });\r\n\r\n           // this.lineChartData.push(typeCount.surname);\r\n           this.barChartLabels.push(typeCount.datetransaction.toLocaleDateString());\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    }\r\n  \r\n  }","<div style=\"display: block;\">\r\n    <canvas baseChart \r\n      [datasets]=\"barChartData\"\r\n      [labels]=\"barChartLabels\"\r\n      [options]=\"barChartOptions\"\r\n      [plugins]=\"barChartPlugins\"\r\n      [legend]=\"barChartLegend\"\r\n      [chartType]=\"barChartType\"\r\n      [colors]=\"colors\">\r\n    </canvas>\r\n  </div>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}