{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../transaction-service.service\";\nimport * as i2 from \"ng2-charts\";\nexport class SalesByMonthComponent {\n  constructor(transactionService) {\n    this.transactionService = transactionService;\n    this.title = 'ng2-charts-demo';\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.barChartData = {\n      labels: this.transactions.map(transaction => transaction.date),\n      datasets: [{\n        data: this.transactions.map(transaction => transaction.amount),\n        label: 'Series A'\n      }]\n    };\n    this.barChartOptions = {\n      responsive: false\n    };\n    this.transactionService.getTransactions().subscribe(transactions => {\n      this.transactions = transactions;\n      this.updateChartData();\n    }, error => {\n      console.log('Error fetching transactions:', error);\n    });\n  }\n  ngOnInit() {}\n  updateChartData() {\n    this.barChartData.labels = this.transactions.map(transaction => transaction.date);\n    this.barChartData.datasets[0].data = this.transactions.map(transaction => transaction.amount);\n  }\n}\nSalesByMonthComponent.ɵfac = function SalesByMonthComponent_Factory(t) {\n  return new (t || SalesByMonthComponent)(i0.ɵɵdirectiveInject(i1.TransactionServiceService));\n};\nSalesByMonthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SalesByMonthComponent,\n  selectors: [[\"app-sales-by-month\"]],\n  decls: 1,\n  vars: 5,\n  consts: [[\"baseChart\", \"\", 3, \"data\", \"options\", \"plugins\", \"legend\", \"type\"]],\n  template: function SalesByMonthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"canvas\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions)(\"plugins\", ctx.barChartPlugins)(\"legend\", ctx.barChartLegend)(\"type\", \"bar\");\n    }\n  },\n  dependencies: [i2.BaseChartDirective],\n  styles: [\".chart-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hZG1pbi9hZG1pbi1mZWF0dXJlcy9zYWxlcy1ieS1tb250aC9zYWxlcy1ieS1tb250aC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jaGFydC1jb250YWluZXIge1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AAeA,OAAM,MAAOA,qBAAqB;EAiBlCC,YAAoBC,kBAA6C;IAA7C,uBAAkB,GAAlBA,kBAAkB;IAhBpC,UAAK,GAAG,iBAAiB;IAEpB,mBAAc,GAAG,IAAI;IACrB,oBAAe,GAAG,EAAE;IAEpB,iBAAY,GAAsC;MACvDC,MAAM,EAAE,IAAI,CAACC,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACC,IAAI,CAAC;MAChEC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,IAAI,CAACL,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACI,MAAM,CAAC;QAAEC,KAAK,EAAE;MAAU,CAAE;KAE1F;IAEM,oBAAe,GAAyC;MAC7DC,UAAU,EAAE;KACb;IAGC,IAAI,CAACV,kBAAkB,CAACW,eAAe,EAAE,CAACC,SAAS,CAChDV,YAA4B,IAAI;MAC/B,IAAI,CAACA,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACW,eAAe,EAAE;IACxB,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAAC;IACpD,CAAC,CACF;EACH;EAEAG,QAAQ,IACR;EAEAJ,eAAe;IACb,IAAI,CAACK,YAAY,CAACjB,MAAM,GAAG,IAAI,CAACC,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACC,IAAI,CAAC;IACnF,IAAI,CAACa,YAAY,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAACC,IAAI,GAAG,IAAI,CAACL,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACI,MAAM,CAAC;EACjG;;;mBAnCaV,qBAAqB;AAAA;;QAArBA,qBAAqB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCflCC,4BAMS;;;MALDA,uCAAqB","names":["SalesByMonthComponent","constructor","transactionService","labels","transactions","map","transaction","date","datasets","data","amount","label","responsive","getTransactions","subscribe","updateChartData","error","console","log","ngOnInit","barChartData","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\admin\\admin-features\\sales-by-month\\sales-by-month.component.ts","C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\admin\\admin-features\\sales-by-month\\sales-by-month.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Chart } from 'angular-highcharts';\r\nimport { TransactionServiceService } from '../transaction-service.service';\r\nimport { ITypePercentage } from '../Transaction.interface';\r\nimport {  SingleDataSet } from 'ng2-charts';\r\nimport { Color, Label } from 'ng2-charts';\r\nimport { ChartOptions, ChartType } from 'chart.js';\r\nimport { ChartConfiguration } from 'chart.js';\r\nimport { Transactions } from '../Transactions';\r\n\r\n@Component({\r\n  selector: 'app-sales-by-month',\r\n  templateUrl: './sales-by-month.component.html',\r\n  styleUrls: ['./sales-by-month.component.scss']\r\n})\r\nexport class SalesByMonthComponent implements OnInit {\r\n  title = 'ng2-charts-demo';\r\n\r\npublic barChartLegend = true;\r\npublic barChartPlugins = [];\r\n\r\npublic barChartData: ChartConfiguration<'bar'>['data'] = {\r\n  labels: this.transactions.map((transaction) => transaction.date),\r\n  datasets: [\r\n    { data: this.transactions.map((transaction) => transaction.amount), label: 'Series A' }\r\n  ]\r\n};\r\n\r\npublic barChartOptions: ChartConfiguration<'bar'>['options'] = {\r\n  responsive: false,\r\n};\r\n\r\nconstructor(private transactionService: TransactionServiceService) {\r\n  this.transactionService.getTransactions().subscribe(\r\n    (transactions: Transactions[]) => {\r\n      this.transactions = transactions;\r\n      this.updateChartData();\r\n    },\r\n    (error) => {\r\n      console.log('Error fetching transactions:', error);\r\n    }\r\n  );\r\n}\r\n\r\nngOnInit(): void {\r\n}\r\n\r\nupdateChartData(): void {\r\n  this.barChartData.labels = this.transactions.map((transaction) => transaction.date);\r\n  this.barChartData.datasets[0].data = this.transactions.map((transaction) => transaction.amount);\r\n}","<canvas baseChart\r\n        [data]=\"barChartData\"\r\n        [options]=\"barChartOptions\"\r\n        [plugins]=\"barChartPlugins\"\r\n        [legend]=\"barChartLegend\"\r\n        [type]=\"'bar'\">\r\n</canvas>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}