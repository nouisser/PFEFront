{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { UserType } from './signin/UserType';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'http://localhost:8089/SpringMVC/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(credentials) {\n    console.log(credentials.username, credentials.password);\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n  register(user) {\n    const formData = new FormData();\n    formData.append('username', user.username);\n    formData.append('email', user.email);\n    formData.append('password', user.password);\n    formData.append('role', user.role);\n    // formData.append('userType', user.role === 'mar' ? UserType.marchand : UserType.client);\n    formData.append('userType', user.role === 'mar' ? UserType.marchand : UserType.client);\n    //if (user.role === 'mar') {\n    //  formData.append('userType', UserType.MARCHAND); // Assignez UserType.marchand si le rôle est 'mar'\n    //} else {\n    //formData.append('userType', UserType.CLIENT); // Sinon, assignez UserType.client\n    // }\n    //if (user.role === 'MARCHAND') {\n    // formData.append('userType', UserType.marchand);\n    //} else {\n    //formData.append('userType', UserType.client);\n    //}\n    formData.append('firstName', user.firstName);\n    formData.append('lastName', user.lastName);\n    formData.append('phoneNumber', user.phoneNumber);\n    formData.append('activitySector', user.activitySector || '');\n    formData.append('url', user.url || '');\n    formData.append('description', user.description || '');\n    formData.append('shopName', user.shopName || '');\n    formData.append('companyName', user.companyName || '');\n    formData.append('paymentEmail', user.paymentEmail || '');\n    formData.append('category', user.category || '');\n    formData.append('phoneNumberSite', user.phoneNumberSite || '');\n    formData.append('country', user.country || '');\n    formData.append('revenue', user.revenue.toString());\n    formData.append('clientType', user.clientType);\n    formData.append('completeAddress', user.completeAddress);\n    formData.append('emailSite', user.emailSite);\n    formData.append('address', user.address);\n    if (user.profilePic) {\n      console.log('Profile picture exists:', user.profilePic);\n      formData.append('profilePic', user.profilePic);\n    }\n    formData.append('postCode', user.postCode);\n    formData.append('technicianName', user.technicianName);\n    formData.append('  nameTechnician', user.nameTechnician);\n    formData.append('city', user.city);\n    console.log(formData);\n    return this.http.post(AUTH_API + 'signup', formData);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","UserType","AUTH_API","httpOptions","headers","AuthService","constructor","http","login","credentials","console","log","username","password","post","register","user","formData","FormData","append","email","role","marchand","client","firstName","lastName","phoneNumber","activitySector","url","description","shopName","companyName","paymentEmail","category","phoneNumberSite","country","revenue","toString","clientType","completeAddress","emailSite","address","profilePic","postCode","technicianName","nameTechnician","city","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aicha\\Desktop\\pfe\\src\\app\\components\\Authentication\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UserType } from './signin/UserType';\nconst AUTH_API = 'http://localhost:8089/SpringMVC/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService{\n  constructor(private http: HttpClient) { }\n  login(credentials: { username: string, password: string }): Observable<any> {\n    console.log(credentials.username,credentials.password);\n    return  this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n  \n  register(user: {\n    completeAddress:string,\n    clientType:string,\n   country: string,\n   revenue:number,\n    username: string,\n    email: string,\n    password: string,\n    role: any,\n    userType: string,\n    firstName: string,\n    lastName: string,\n    phoneNumber: string,\n    activitySector?: string,\n    url?: string,\n    description?: string,\n    shopName?: string,\n    companyName?: string,\n    paymentEmail?: string,\n    category?: string,\n    phoneNumberSite?: string,\n    emailSite:string,\n    address:string,\n    technicianName:string,\n    profilePic: File | null,\n    postCode:string,\n    city :string,\n    nameTechnician:string\n\n\n\n  }): Observable<any> {\n    const formData = new FormData();\n    formData.append('username', user.username);\n    formData.append('email', user.email);\n    formData.append('password', user.password);\n    formData.append('role', user.role);\n  // formData.append('userType', user.role === 'mar' ? UserType.marchand : UserType.client);\nformData.append('userType', user.role === 'mar' ? UserType.marchand : UserType.client);\n  //if (user.role === 'mar') {\n  //  formData.append('userType', UserType.MARCHAND); // Assignez UserType.marchand si le rôle est 'mar'\n  //} else {\n    //formData.append('userType', UserType.CLIENT); // Sinon, assignez UserType.client\n // }\n\n   //if (user.role === 'MARCHAND') {\n   // formData.append('userType', UserType.marchand);\n  //} else {\n    //formData.append('userType', UserType.client);\n  //}\n  \n    formData.append('firstName', user.firstName);\n    formData.append('lastName', user.lastName);\n    formData.append('phoneNumber', user.phoneNumber);\n    formData.append('activitySector', user.activitySector || '');\n    formData.append('url', user.url || '');\n    formData.append('description', user.description || '');\n    formData.append('shopName', user.shopName || '');\n    formData.append('companyName', user.companyName || '');\n    formData.append('paymentEmail', user.paymentEmail || '');\n    formData.append('category', user.category || '');\n    formData.append('phoneNumberSite', user.phoneNumberSite || '');\n    formData.append('country', user.country || '');\n    formData.append('revenue', user.revenue.toString());\n    formData.append('clientType', user.clientType); \n    formData.append('completeAddress', user.completeAddress);\nformData.append('emailSite', user.emailSite);\nformData.append('address', user.address);\nif (user.profilePic) {\n  console.log('Profile picture exists:', user.profilePic);\n\n  formData.append('profilePic', user.profilePic);\n}\nformData.append('postCode', user.postCode);\nformData.append('technicianName', user.technicianName);\nformData.append('  nameTechnician', user.nameTechnician);\n\nformData.append('city', user.city);\nconsole.log(formData)\n\n    return this.http.post(AUTH_API + 'signup', formData);\n\n  }\n}   "]},"metadata":{},"sourceType":"module","externalDependencies":[]}